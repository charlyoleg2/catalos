---
import type { CollectionEntry } from 'astro:content';
import { renameExt, selectFileTable } from '@src/lib/fileExt.ts';
import '@src/styles/styling-vars.css';

interface Props {
	part: CollectionEntry<'parts'>;
}

const { part } = Astro.props;

const base = import.meta.env.BASE_URL;
const base2 = base === '/' ? '/' : `${base}/`;
---

<article id="arti" data-base2={base2} data-uiurl={part.data.linkToUi}>
	<action-table sort="Type">
		<table>
			<caption>Part files</caption>
			<thead>
				<tr>
					<th>File</th>
					<th>Type</th>
					<th class="shorter">Size (Bytes)</th>
					<th no-sort></th>
					<th no-sort></th>
					<th no-sort></th>
				</tr>
			</thead>
			<tbody>
				{
					part.data.files
						.filter((item) => selectFileTable(item.fileType))
						.map((item) => (
							<tr>
								<td>{item.fileName}</td>
								<td>{renameExt(item.fileType)}</td>
								<td class="taright">{item.fileSize}</td>
								<td class="rvd">
									<a href={`u/${part.id}/${item.fileName}`}>raw</a>
								</td>
								<td class="rvd">
									<button
										class="bview"
										data-dfurl={`u/${part.id}/${item.fileName}`}
										data-dftype={item.fileType}
									>
										view
									</button>
								</td>
								<td class="rvd">
									<a
										href={`u/${part.id}/${item.fileName}`}
										download={item.fileName}
									>
										download
									</a>
								</td>
							</tr>
						))
				}
			</tbody>
		</table>
	</action-table>
</article>
<dialog id="dBview"><div></div><button class="bback">close - back - escape</button></dialog>

<script>
	//import '@colinaut/action-table';
	import '@colinaut/action-table/dist/action-table.js';
	import '@colinaut/action-table/dist/action-table.css';

	import {
		urlDxfViewer,
		urlStepViewer,
		urlStlViewer,
		urlGlbViewer,
		urlCadViewer,
		url3dViewer,
	} from '@src/lib/viewer-url.ts';

	const articleElem = document.querySelector('article#arti') as HTMLElement;
	const c_base2 = articleElem.dataset.base2 as string;
	const c_uiUrl = articleElem.dataset.uiurl as string;
	const dialogBview = document.querySelector('dialog#dBview') as HTMLDialogElement;
	const dialogBdiv = document.querySelector('dialog#dBview > div') as HTMLDivElement;
	const buttonBback = document.querySelector('dialog#dBview > button.bback') as HTMLButtonElement;
	const buttonBviews = document.querySelectorAll('button.bview');

	function removeAllChilds(parentElem: HTMLElement) {
		while (parentElem.firstChild) {
			parentElem.removeChild(parentElem.firstChild);
		}
	}
	function cleanDiv() {
		removeAllChilds(dialogBdiv);
	}
	async function addTxt(dfUrl: string) {
		cleanDiv();
		//console.log(`dbg649: addTxt with dfUrl: ${dfUrl}`);
		const elemTextarea = document.createElement('textarea');
		dialogBdiv.appendChild(elemTextarea);
		elemTextarea.setAttribute('readonly', '');
		elemTextarea.setAttribute('wrap', 'off');
		//elemTextarea.style.display = 'block';
		elemTextarea.style.width = '100%';
		elemTextarea.style.height = '100%';
		elemTextarea.style.backgroundColor = 'Pink';
		elemTextarea.style.color = 'DarkBlue';
		elemTextarea.style.resize = 'none';
		const resp = await fetch(dfUrl);
		if (resp.ok) {
			const txt = await resp.text();
			elemTextarea.value = txt;
		}
		dialogBview.showModal();
	}
	function addSvg(dfUrl: string) {
		cleanDiv();
		//console.log(`dbg648: addSvg with dfUrl: ${dfUrl}`);
		const elemImg = document.createElement('img');
		dialogBdiv.appendChild(elemImg);
		elemImg.setAttribute('src', dfUrl);
		elemImg.setAttribute('alt', dfUrl);
		//elemImg.style.display = 'block';
		elemImg.style.width = '100%';
		elemImg.style.height = '100%';
		elemImg.style.backgroundColor = 'Pink';
		//elemImg.style.color = 'DarkBlue';
		dialogBview.showModal();
	}
	//function addDxf(dfUrl: string) {
	//	cleanDiv();
	//	console.log(`dbg647: addDxf with dfUrl: ${dfUrl}`);
	//	dialogBview.showModal();
	//}
	function actionView(dfUrl: string, dfType: string) {
		//console.log(`dbg341: dfUrl: ${dfUrl} dfType: ${dfType}`);
		if (['step', 'stp'].includes(dfType)) {
			window.open(urlStepViewer);
		} else if (['stl'].includes(dfType)) {
			window.open(urlStlViewer);
		} else if (['glb'].includes(dfType)) {
			window.open(urlGlbViewer);
		} else if (['brep'].includes(dfType)) {
			window.open(urlCadViewer);
		} else if (['iges', 'igs', '3mf'].includes(dfType)) {
			window.open(url3dViewer);
		} else if (['pxJson'].includes(dfType)) {
			const pxUrl = `${c_uiUrl}?pxUrl=${window.location.origin}${c_base2}${dfUrl}`;
			//const pxUrl = `${part.data.linkToUi}`;
			window.open(pxUrl);
		} else if (
			['txtLog', 'paxJson', 'jsCad', 'jsManifold', 'scad', 'pyFreecad'].includes(dfType)
		) {
			//window.open(dfUrl);
			//cleanDiv();
			addTxt(dfUrl);
			//dialogBview.showModal();
		} else if (['svg'].includes(dfType)) {
			addSvg(dfUrl);
		} else if (['dxf'].includes(dfType)) {
			const dxfUrl = `${urlDxfViewer}?dxfUrl=${window.location.origin}${c_base2}${dfUrl}`;
			//const dxfUrl = `${urlDxfViewer}`;
			window.open(dxfUrl);
		} else {
			console.log(`dbg722: the viewer of dfType ${dfType} is not defined`);
		}
	}

	buttonBback.addEventListener('click', () => {
		dialogBview.close();
		cleanDiv();
	});
	(buttonBviews as NodeListOf<HTMLElement>).forEach((iButton) =>
		iButton.addEventListener('click', () => {
			const dfUrl = iButton.dataset.dfurl as string;
			const dfType = iButton.dataset.dftype as string;
			//console.log(`dbg123: dfUrl: ${dfUrl} dfType: ${dfType}`);
			actionView(dfUrl, dfType);
			//dialogBview.showModal();
		})
	);
</script>

<style>
	table > caption {
		color: var(--cLight);
		background-color: var(--c3w);
	}
	table > tbody > tr:nth-child(odd) {
		background-color: var(--c4w);
	}
	/*
	table > tbody > tr:nth-child(even) {
		background-color: var(--c5b);
	}
	table > tbody > tr:nth-child(even) > td.sorted {
		background-color: var(--cLight);
	}
	*/
	th {
		padding: 0.2rem 1rem;
	}
	th.shorter {
		padding: 0.2rem 0.5rem;
	}
	td {
		padding: 0.2rem 0.5rem;
	}
	td.taright {
		text-align: right;
	}
	td.rvd {
		padding: 0.2rem 0.5rem;
	}
	button.bview {
		background-color: transparent;
		border: none;
		outline: none;
	}
	dialog#dBview {
		display: none;
	}
	dialog#dBview[open] {
		display: block;
	}
	dialog#dBview::backdrop {
		background-color: rgba(0, 0, 0, 0.4);
	}
	dialog#dBview > div {
		display: block;
		background-color: grey;
		width: 80vw;
		height: 70vh;
		margin: 0;
	}
	dialog#dBview > button.bback {
		display: block;
		color: white;
		background-color: black;
		border: none;
		outline: none;
		width: 100%;
		height: 2rem;
		margin: 1rem 0 0 0;
	}
</style>
