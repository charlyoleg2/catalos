---
import type { CollectionEntry } from 'astro:content';
import { renameExt, selectFileTable } from '@src/lib/fileExt.ts';
import '@src/styles/styling-vars.css';

interface Props {
	design: CollectionEntry<'designs'>;
}

const { design } = Astro.props;
---

<article>
	<action-table sort="Type">
		<table>
			<caption>Design files</caption>
			<thead>
				<tr>
					<th>File</th>
					<th>Type</th>
					<th>Size</th>
					<th no-sort></th>
					<th no-sort></th>
					<th no-sort></th>
				</tr>
			</thead>
			<tbody>
				{
					design.data.files
						.filter((item) => selectFileTable(item.fileType))
						.map((item) => (
							<tr>
								<td>{item.fileName}</td>
								<td>{renameExt(item.fileType)}</td>
								<td>{item.fileSize}</td>
								<td class="rvd">
									<a href={`u/${design.id}/${item.fileName}`}>raw</a>
								</td>
								<td class="rvd">
									<button
										class="bview"
										data-dfurl={`u/${design.id}/${item.fileName}`}
										data-dftype={item.fileType}
									>
										view
									</button>
								</td>
								<td class="rvd">
									<a
										href={`u/${design.id}/${item.fileName}`}
										download={item.fileName}
									>
										download
									</a>
								</td>
							</tr>
						))
				}
			</tbody>
		</table>
	</action-table>
</article>
<dialog id="dBview"><div></div><button class="bback">close - back - escape</button></dialog>

<script>
	//import '@colinaut/action-table';
	import '@colinaut/action-table/dist/action-table.js';
	import '@colinaut/action-table/dist/action-table.css';

	const dialogBview = document.querySelector('dialog#dBview') as HTMLDialogElement;
	const buttonBback = document.querySelector('dialog#dBview > button.bback') as HTMLButtonElement;
	const buttonBviews = document.querySelectorAll('button.bview');

	function actionView(dfUrl: string, dfType: string) {
		//console.log(`dbg341: dfUrl: ${dfUrl} dfType: ${dfType}`);
		if (['txtLog'].includes(dfType)) {
			window.open(dfUrl);
		} else {
			dialogBview.showModal();
		}
	}

	buttonBback.addEventListener('click', () => {
		dialogBview.close();
	});
	(buttonBviews as NodeListOf<HTMLElement>).forEach((iButton) =>
		iButton.addEventListener('click', () => {
			const dfUrl = iButton.dataset.dfurl as string;
			const dfType = iButton.dataset.dftype as string;
			//console.log(`dbg123: dfUrl: ${dfUrl} dfType: ${dfType}`);
			actionView(dfUrl, dfType);
			//dialogBview.showModal();
		})
	);
</script>

<style>
	table > caption {
		color: var(--cLight);
		background-color: var(--c3w);
	}
	table > tbody > tr:nth-child(odd) {
		background-color: var(--c4w);
	}
	/*
	table > tbody > tr:nth-child(even) {
		background-color: var(--c5b);
	}
	table > tbody > tr:nth-child(even) > td.sorted {
		background-color: var(--cLight);
	}
	*/
	th,
	td {
		padding: 0.2rem 2rem;
	}
	td.rvd {
		padding: 0.2rem 0.5rem;
	}
	button.bview {
		background-color: transparent;
		border: none;
		outline: none;
	}
	dialog#dBview {
		display: none;
	}
	dialog#dBview[open] {
		display: block;
	}
	dialog#dBview::backdrop {
		background-color: rgba(0, 0, 0, 0.4);
	}
	dialog#dBview > div {
		display: block;
		background-color: grey;
		width: 80vw;
		height: 70vh;
		margin: 0;
	}
	dialog#dBview > button.bback {
		display: block;
		color: white;
		background-color: black;
		border: none;
		outline: none;
		width: 100%;
		height: 2rem;
		margin: 1rem 0 0 0;
	}
</style>
